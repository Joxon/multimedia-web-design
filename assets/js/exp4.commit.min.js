(function($){function GithubAPI(auth){let repo;let filesToCommit=[];let currentBranch={};let newCommit={};let gh=new GitHub(auth);this.setRepo=function(userName,repoName){repo=gh.getRepo(userName,repoName)};this.setBranch=function(branchName){if(!repo){throw 'Repository is not initialized'}
return repo.listBranches().then(branches=>{let branchExists=branches.data.find(branch=>branch.name===branchName);if(!branchExists){return repo.createBranch('master',branchName).then(()=>{currentBranch.name=branchName})}else{currentBranch.name=branchName}})};this.pushFiles=function(message,files){if(!repo){throw 'Repository is not initialized'}
if(!currentBranch.hasOwnProperty('name')){throw 'Branch is not set'}
return getCurrentCommitSHA().then(getCurrentTreeSHA).then(()=>createFiles(files)).then(createTree).then(()=>createCommit(message)).then(updateHead).catch(e=>{console.error(e)})};function getCurrentCommitSHA(){return repo.getRef('heads/'+currentBranch.name).then(ref=>{currentBranch.commitSHA=ref.data.object.sha})}
function getCurrentTreeSHA(){return repo.getCommit(currentBranch.commitSHA).then(commit=>{currentBranch.treeSHA=commit.data.tree.sha})}
function createFiles(filesInfo){let promises=[];let length=filesInfo.length;for(let i=0;i<length;i++){promises.push(createFile(filesInfo[i]))}
return Promise.all(promises)}
function createFile(fileInfo){return repo.createBlob(fileInfo.content).then(blob=>{filesToCommit.push({sha:blob.data.sha,path:fileInfo.path,mode:'100644',type:'blob'})})}
function createTree(){return repo.createTree(filesToCommit,currentBranch.treeSHA).then(tree=>{newCommit.treeSHA=tree.data.sha})}
function createCommit(message){return repo.commit(currentBranch.commitSHA,newCommit.treeSHA,message).then(commit=>{newCommit.sha=commit.data.sha})}
function updateHead(){return repo.updateHead('heads/'+currentBranch.name,newCommit.sha)}}
const ENCRYPTED_TOKEN='{"iv":"wwZja1kyc6vnKMP+sXaRdg==","v":1,"iter":10000,"ks":128,"ts":64,"mode":"ccm","adata":"","cipher":"aes","salt":"MfCsdtUbCOQ=","ct":"ZMgE9geLS8jfirkqE4pK6R1K6slvcLwC2Vo2zYeKGW0Yq9sOY6ez5Utnte9MDQSl"}';const inputFile=$('#input-file');const inputLabel=$('#input-label');const buttonUpload=$('#button-upload');const imgCap=$('#img-caption');const imgSel=$('#img-selected');imgCap.html('请选择小于1MB的JPG图片');buttonUpload.prop('disabled',!0);let imgFile=null;let imgBase64=null;let imgBase64Data=null;const reader=new FileReader();reader.onload=()=>{imgBase64=reader.result;imgBase64Data=imgBase64.split(',')[1];imgSel.prop('src',imgBase64);imgCap.html('加载完成，请点击按钮开始上传')};inputFile.change(()=>{buttonUpload.prop('disabled',!1);imgCap.html('图片加载中...');imgFile=inputFile.prop('files')[0];const ONE_MB=1048576;if(imgFile.size>ONE_MB){imgCap.html('不允许上传大于1MB的图片，请重试');buttonUpload.prop('disabled',!0)}else{reader.readAsDataURL(imgFile)}});buttonUpload.click(()=>{buttonUpload.prop('disabled',!0);inputFile.prop('disabled',!0);imgCap.html('正在上传...');let pwd=prompt('为防止API被滥用，请输入上传密码：');let token;try{token=sjcl.decrypt(pwd,ENCRYPTED_TOKEN)}catch(e){imgCap.html('密码不正确，请重试。');alert('密码不正确！'+e);buttonUpload.prop('disabled',!1);inputFile.prop('disabled',!1);return}
imgCap.html('密码正确。准备上传...');let api=new GithubAPI({token:token});api.setRepo('joxon','multimedia-web-design');api.setBranch('gh-pages').then(()=>{imgCap.html('正在上传...');let contentObj={content:imgBase64Data,encoding:'base64'};api.pushFiles(`uploaded ${imgFile.name} to exp4/upload.jpg`,[{content:contentObj,path:'exp4/upload.jpg'}])}).then(()=>{imgCap.html('上传成功！由于GitHub Pages部署需要时间，网页图片可能不会立即更新。点击“查看历史”可以验证上传结果。')}).catch(e=>console.error(`Error occured when pushing ${imgFile.name}: ${e}`));buttonUpload.prop('disabled',!1);inputFile.prop('disabled',!1)})})(jQuery)